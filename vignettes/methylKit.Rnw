%\VignetteIndexEntry{methylKit: User Guide}
%\VignetteKeywords{methylBase, methylRaw, calculateDiffMeth}
%\VignettePackage{methylKit}


\documentclass{article}
\title{ methylKit: User Guide}
\usepackage{cite}
\usepackage{hyperref}
\usepackage{url}               % used in bibliography
\bibliographystyle{unsrt}

\usepackage{Sweave}



\begin{document}
\SweaveOpts{concordance=TRUE}

\author{Altuna Akalin\thanks{Author of the vignette. See \nameref{sec:acknowledgements} for a list of contributors.}\\ 
\texttt{altuna.akalin@mdc-berlin.de}
}

%%%%%%% YOU may need to introduce result='hide' to compile this again

\SweaveOpts{fig.path='figure/',dev='pdf',external=FALSE,fig.align='center',cache=TRUE,message=FALSE}
%%%<<set-options,echo=FALSE,results='hide',cache=FALSE>>=
%%%options(replace.assign=TRUE,width=60)
%%%knit_hooks$set(fig=function(before, options, envir){if (before) par(mar=c(4,4,.1,.1),cex.lab=.95,cex.axis=.9,mgp=c(2,.7,0),tcl=-.3)})
%%%@


\maketitle

\tableofcontents



\section{Introduction}
In this manual, we will show how to use the methylKit package. methylKit is an R package for analysis and annotation of DNA methylation information obtained by high-throughput bisulfite sequencing. The package is designed to deal with sequencing data from RRBS and its variants. But it can potentially handle whole-genome bisulfite sequencing data if proper input format is provided. 

\subsection{DNA methylation}
DNA methylation in vertebrates typically occurs at CpG dinucleotides, however non-CpG Cs are also methylated in certain tissues such as embryonic stem cells. DNA methylation can act as an epigenetic control mechanism for gene regulation. Methylation can hinder binding of transcription factors and/or methylated bases can be bound by methyl-binding-domain proteins which can recruit chromatin remodeling factors. In both cases, the transcription of the regulated gene will be effected. In addition, aberrant DNA methylation patterns have been associated with many human malignancies and can be used in a predictive manner. In malignant tissues, DNA is either hypo-methylated or hyper-methylated compared to the normal tissue. The location of hyper- and hypo-methylated sites gives a distinct signature to many diseases. Traditionally, hypo-methylation is associated with gene transcription (if it is on a regulatory region such as promoters) and hyper-methylation is associated with gene repression.

\subsection{High-throughput bisulfite sequencing}
Bisulfite sequencing is a technique that can determine DNA methylation patterns. The major difference from regular sequencing experiments is that, in bisulfite sequencing DNA is treated with bisulfite which converts cytosine residues to uracil, but leaves 5-methylcytosine residues unaffected. By sequencing and aligning those converted DNA fragments it is possible to call methylation status of a base. Usually, the methylation status of a base determined by a high-throughput bisulfite sequencing will not be a binary score, but it will be a percentage. The percentage simply determines how many of the bases that are aligning to a given cytosine location in the genome have actual C bases in the reads. Since bisulfite treatment leaves methylated Cs intact, that percentage will give us percent methylation score on that base. The reasons why we will not get a binary response are 1) the probable sequencing errors in high-throughput sequencing experiments 2) incomplete bisulfite conversion 3) (and a more likely scenario) is heterogeneity of samples and heterogeneity of paired chromosomes from the same sample 




\section{Basics}
\subsection{Reading the methylation call files}
We start by reading in the methylation call data from bisulfite
sequencing with \texttt{modRead} function. Reading in the data this way
will return a methylRawList object which stores methylation
information per sample for each covered base. The methylation call files are basically text
files that contain percent methylation score per base. A typical methylation call file looks like this:
<<echo=FALSE>>=
read.table( system.file("extdata", "test1.myCpG.txt", package = "methylKit"),header=T,nrows=5)
@

Most of the time bisulfite sequencing experiments have test and control samples. The test samples can be from a disease tissue while the control samples can be from a healthy tissue. You can read a set of methylation call files that have test/control conditions giving \texttt{treatment} vector option. For sake of subsequent analysis, file.list, sample.id and treatment option should have the same order. In the following example, first two files are have the sample ids "test1" and "test2" and as determined by treatment vector they belong to the same group. The third and fourth files have sample ids "ctrl1" and "ctrl2" and they belong to the same group as indicated by the treatment vector.

<<>>=
library(methylKit)
file.list=list( system.file("extdata", "test1.myCpG.txt", package = "methylKit"),
                system.file("extdata", "test2.myCpG.txt", package = "methylKit"),
                system.file("extdata", "control1.myCpG.txt", package = "methylKit"),
                system.file("extdata", "control2.myCpG.txt", package = "methylKit") )


# read the files to a methylRawList object: myobj
myobj=modRead(file.list,
           sample.id=list("test1","test2","ctrl1","ctrl2"),
           assembly="hg18",
           treatment=c(1,1,0,0),
           context="CpG"
           )


@

\subsection{Reading the methylation calls from sorted  Bismark alignments}
Alternatively, methylation percentage calls can be calculated from
sorted SAM file(s) from Bismark aligner and read-in to the memory. Bismark is a
popular aligner for bisulfite sequencing reads \cite{Krueger2011}. \texttt{read.bismark} function is designed to read-in Bismark SAM files as \texttt{methylRaw} or \texttt{methylRawList} objects which store per base methylation calls. SAM files must be sorted by chromosome and read position columns, using 'sort' command in unix-like machines will accomplish such a sort easily.

The following command reads a sorted SAM file and creates a \texttt{methylRaw} object for CpG methylation.The user has the option to save the methylation call files to a folder given by \texttt{save.folder} option. The saved files can be read-in using the \texttt{read} function when needed. 

<<eval=FALSE>>=
my.methRaw=read.bismark(
	   location=system.file("extdata", "test.fastq_bismark.sorted.min.sam", 
	                    package = "methylKit"),
             sample.id="test1",assembly="hg18",read.context="CpG",save.folder=getwd())
@

It is also possible to read multiple SAM files at the same time, check \texttt{read.bismark} documentation.


\subsection{Descriptive statistics on samples}
Since we read the methylation data now, we can check the basic stats about the methylation data such as coverage and percent  methylation. We now have a \texttt{methylRawList} object which contains methylation information per sample. The following command prints out percent methylation statistics for second sample: "test2"

<<>>=
getMethylationStats(myobj[[2]],plot=F,both.strands=F)
@

The following command plots the histogram for percent methylation distribution.The figure below is the histogram and numbers on bars denote what percentage of locations are contained in that bin. Typically, percent methylation histogram should have two peaks on both ends. In any given cell, any given base are either methylated or not. Therefore, looking at many cells should yield a similar pattern where we see lots of locations with high methylation and lots of locations with low methylation.


\begin{center}
%%%<<fig.width=6,fig.height=6.5,out.width='.9\\linewidth'>>=
<<fig=TRUE , echo =TRUE,width=5, height=5 >>=
getMethylationStats(myobj[[2]],plot=T,both.strands=F)
@
\end{center}



We can also plot the read coverage per base information in a similar way, again numbers on bars denote what percentage of locations are contained in that bin. Experiments that are highly suffering from PCR duplication bias will have a secondary peak towards the right hand side of the histogram.


\begin{center}
%%%<<fig.width=6,fig.height=6.5,out.width='.9\\linewidth'>>=
<<fig=TRUE , echo =TRUE,width=5, height=5 >>=

library ("graphics")
getCoverageStats(myobj[[2]],plot=T,both.strands=F)
@
\end{center}

\subsection{Filtering samples based on read coverage}
It might be useful to filter samples based on coverage. Particularly, if our samples are suffering from PCR bias it would be useful to discard bases with very high read coverage. Furthermore, we would also like to discard bases that have low read coverage, a high enough read coverage will increase the power of the statistical tests. The code below filters a \texttt{methylRawList} and discards bases that have coverage below 10X and also discards the bases that have more than 99.9th percentile of coverage in each sample.

<<>>=
filtered.myobj=filterByCoverage(myobj,lo.count=10,lo.perc=NULL,
                                      hi.count=NULL,hi.perc=99.9)
@


\section{Comparative analysis}
\subsection{Merging samples}

In order to do further analysis, we will need to get the bases covered in all samples. The following function will merge all samples to one object for base-pair locations that are covered in all samples. Setting \texttt{destrand}=TRUE (the default is FALSE) will merge reads on both strands of a CpG dinucleotide. This provides better coverage, but only advised when looking at CpG methylation (for CpH methylation this will cause wrong results in subsequent analyses). In addition, setting \texttt{destrand}=TRUE will only work when operating on base-pair resolution, otherwise setting this option TRUE will have no effect. The \texttt{unite()} function will return a \texttt{methylBase} object which will be our main object for all comparative analysis. The \texttt{methylBase} object contains methylation information for regions/bases that are covered in all samples.
<<>>=
meth=unite(myobj, destrand=FALSE)
@

Let us take a look at the data content of methylBase object:
<<>>=
head(meth)
@

By default, \texttt{unite} function produces bases/regions covered in all samples. That requirement can be relaxed using "min.per.group" option in \texttt{unite} function.
<<eval=FALSE>>=
# creates a methylBase object. Only CpGs covered at least in 1 sample per group will be returned
# there were two groups defined by the treatment vector given during the creation of myobj treatment=c(1,1,0,0)
meth.min=unite(myobj,min.per.group=1L)
@
\subsection{Sample Correlation}
We can check the correlation between samples using \texttt{getCorrelation}. This function will either plot scatter plot and correlation coefficients or just print a correlation matrix

\begin{center}
%%%<<fig.width=6,fig.height=6,out.width='.9\\linewidth'>>=
<<fig=TRUE , echo =TRUE,width=6, height=6 >>=

getCorrelation(meth,plot=T)
@
\end{center}

\subsection{Clustering samples}
We can cluster the samples based on the similarity of their methylation profiles. The following function will cluster the samples and draw a dendrogram.
\begin{center}
%%%<<fig.width=6,fig.height=6,out.width='.9\\linewidth'>>=
<<fig=TRUE , echo =TRUE ,width=6, height=6 >>=

clusterSamples(meth, dist="correlation", method="ward", plot=TRUE)
@
\end{center}

Setting the plot=FALSE will return a dendrogram object which can be manipulated by users or fed in to other user functions that can work with dendrograms.
<<>>=
hc = clusterSamples(meth, dist="correlation", method="ward", plot=FALSE)
@
We can also do a PCA analysis on our samples. The following function will plot a scree plot for importance of components.
\begin{center}
%%%<<fig.width=6,fig.height=6,out.width='.9\\linewidth'>>=
<<fig=TRUE , echo =TRUE ,width=6, height=6 >>=

PCASamples(meth, screeplot=TRUE)
@
\end{center}
\ \\ \ \\
\ \\ \ \\
We can also plot PC1 and PC2 axis and a scatter plot of our samples on those axis which will reveal how they cluster.

\begin{center}
%%%%<<fig.width=6,fig.height=6,out.width='.9\\linewidth'>>=
<<fig=TRUE , echo =TRUE ,width=6, height=6 >>=

PCASamples(meth)
@
\end{center}

\subsection{Batch effects}
We have implemented some rudimentary functionality for batch effect control. 
You can check which one of the principal components are statistically associated 
with the potential batch
effects such as batch processing dates, age of subjects, sex of subjects using \texttt{assocComp}. 
The function gets principal components from the percent methylation matrix derived from the input
\texttt{methylBase} object, and checks for association. The tests for association are either via Kruskal-Wallis test or Wilcoxon test 
for categorical attributes and correlation test for numerical attributes for
samples such as age. If you are convinced that some principal components are 
accounting for batch effects, you can remove those principal components from your data using 
\texttt{removeComp}. 
<<>>=
# make some batch data frame
# this is a bogus data frame
# we don't have batch information
# for the example data
sampleAnnotation=data.frame(batch_id=c("a","a","b","b"),
                            age=c(19,34,23,40))

as=assocComp(mBase=meth,sampleAnnotation)
as

# construct a new object by removing the first pricipal component
# from percent methylation value matrix
newObj=removeComp(meth,comp=1)
@
In addition to the methods described above, if you have used other ways to correct for batch effects and obtained a corrected
percent methylation matrix,
you can use \texttt{reconstruct} function to reconstruct a corrected \texttt{methylBase} 
object. Users have to supply a corrected percent methylation matrix
and \texttt{methylBase} object (where the uncorrected percent methylation matrix obtained from)
to the \texttt{reconstruct} function. Corrected percent methylation matrix should have
the same row and column order as the original percent methylation matrix.
All of these functions described in this section work on a \texttt{methylBase}
object that does not have missing values (that means all bases in methylBase object
should have coverage in all samples).
<<>>=
mat=percMethylation(meth)

# do some changes in the matrix
# this is just a toy example
# ideally you want to correct the matrix
# for batch effects
mat[mat==100]=80
 
# reconstruct the methylBase from the corrected matrix
newobj=reconstruct(mat,meth)

@

\subsection{Tiling windows analysis}
For some situations, it might be desirable to summarize methylation information over tiling windows rather than doing base-pair resolution analysis. \texttt{methylKit} provides functionality to do such analysis. The function below tiles the genome with windows 1000bp length and 1000bp step-size and summarizes the methylation information on those tiles. In this case, it returns a \texttt{methylRawList} object which can be fed into \texttt{unite} and \texttt{calculateDiffMeth} functions consecutively to get differentially methylated regions. The tilling function adds up C and T counts from each covered cytosine and returns a total C and T count for each tile.

<<warning=FALSE>>=
tiles=tileMethylCounts(myobj,win.size=1000,step.size=1000)
head(tiles[[1]],3)
@

\subsection{Finding differentially methylated bases or regions}
\texttt{calculateDiffMeth()} function is the main function to calculate differential methylation. Depending on the sample size per each set it will either use Fisher's exact or logistic regression to calculate P-values. P-values will be adjusted to Q-values using SLIM method \cite{Wang2011a}.
<<>>=
myDiff=calculateDiffMeth(meth)
@

After q-value calculation, we can select the differentially methylated regions/bases based on q-value and percent methylation difference cutoffs. Following bit selects the bases that have q-value<0.01 and percent methylation difference larger than 25\%. If you specify \texttt{type="hyper"} or \texttt{type="hypo"} options, you will get hyper-methylated or hypo-methylated regions/bases.
<<>>=
# get hyper methylated bases
myDiff25p.hyper=get.methylDiff(myDiff,difference=25,qvalue=0.01,type="hyper")
#
# get hypo methylated bases
myDiff25p.hypo=get.methylDiff(myDiff,difference=25,qvalue=0.01,type="hypo")
#
#
# get all differentially methylated bases
myDiff25p=get.methylDiff(myDiff,difference=25,qvalue=0.01)
@

We can also visualize the distribution of hypo/hyper-methylated bases/regions per chromosome using the following function. In this case, the example set includes only one chromosome. The \texttt{list} shows percentages of hypo/hyper methylated bases over all the covered bases in a given chromosome.

 
<<>>=
diffMethPerChr(myDiff,plot=FALSE,qvalue.cutoff=0.01, meth.cutoff=25)
@
 
\subsubsection{Finding differentially methylated bases using multiple-cores}
The differential methylation calculation speed can be increased substantially by utilizing multiple-cores in a machine if available. Both Fisher's Exact test and logistic regression based test are able to use multiple-core option.
\\
The following piece of code will run differential methylation calculation using 2 cores.

<<eval=FALSE>>=
myDiff=calculateDiffMeth(meth,num.cores=2)
@


\section{Annotating differentially methylated bases or regions}
We can annotate our differentially methylated regions/bases based on gene annotation. In this example, we read the gene annotation from a bed file and annotate our differentially methylated regions with that information. This will tell us what percentage of our differentially methylated regions are on promoters/introns/exons/intergenic region. Similar gene annotation can be fetched using \texttt{GenomicFeatures} package available from Bioconductor.org.

<<>>=
gene.obj=read.transcript.features(system.file("extdata", "refseq.hg18.bed.txt", 
                                           package = "methylKit"))
#
# annotate differentially methylated Cs with promoter/exon/intron using annotation data
#
annotate.WithGenicParts(myDiff25p,gene.obj)
@

Similarly, we can read the CpG island annotation and annotate our differentially methylated bases/regions with them.

<<>>=
# read the shores and flanking regions and name the flanks as shores 
# and CpG islands as CpGi
cpg.obj=read.feature.flank(system.file("extdata", "cpgi.hg18.bed.txt", 
                                        package = "methylKit"),
                           feature.flank.name=c("CpGi","shores"))
#
#
diffCpGann=annotate.WithFeature.Flank(myDiff25p,cpg.obj$CpGi,cpg.obj$shores,
                                      feature.name="CpGi",flank.name="shores")
@


\subsection{Regional analysis}
We can also summarize methylation information over a set of defined regions such as promoters or CpG islands. The function below summarizes the methylation information over a given set of promoter regions and outputs a \texttt{methylRaw} or \texttt{methylRawList} object depending on the input.

<<>>=
promoters=regionCounts(myobj,gene.obj$promoters)

head(promoters[[1]])
@



\subsection{Convenience functions for annotation objects}
After getting the annotation of differentially methylated regions, we can get the distance to TSS and nearest gene name using the \texttt{getAssociationWithTSS} function.

<<>>=
diffAnn=annotate.WithGenicParts(myDiff25p,gene.obj)

# target.row is the row number in myDiff25p
head(getAssociationWithTSS(diffAnn))
@

It is also desirable to get percentage/number of differentially methylated regions that overlap with intron/exon/promoters

<<>>=
getTargetAnnotationStats(diffAnn,percentage=TRUE,precedence=TRUE)
@

We can also plot the percentage of differentially methylated bases overlapping with exon/intron/promoters

\begin{center}
%%%%<<fig.width=6,fig.height=6,out.width='.9\\linewidth'>>=
<<fig=TRUE , echo =TRUE,width=6, height=6>>=

plotTargetAnnotation(diffAnn,precedence=TRUE,
    main="differential methylation annotation")
@
\end{center}

We can also plot the CpG island annotation the same way. The plot below shows what percentage of differentially methylated bases are on CpG islands, CpG island shores and other regions.

\begin{center}
%%%<<fig.width=6,fig.height=6,out.width='.9\\linewidth'>>=
<<fig=TRUE , echo =TRUE,width=6, height=6>>=

plotTargetAnnotation(diffCpGann,col=c("green","gray","white"),
       main="differential methylation annotation")
@
\end{center}

It might be also useful to get percentage of intron/exon/promoters that overlap with differentially methylated bases.

<<>>=
getFeatsWithTargetsStats(diffAnn,percentage=TRUE)
@

\section{methylKit convenience functions}
\subsection{coercion}
Most \texttt{methylKit} objects (methylRaw,methylBase and methylDiff) can be coerced to \texttt{GRanges} objects from \texttt{GenomicRanges} package. Coercing methylKit objects to \texttt{GRanges} will give users additional flexibility when customizing their analyses.

<<>>==
class(meth)
as(meth,"GRanges")
class(myDiff)
as(myDiff,"GRanges")
@
\subsection{select}

We can also select rows from \texttt{methylRaw}, \texttt{methylBase} and \texttt{methylDiff} objects with "select" function. An appropriate methylKit object will be returned as a result of "select" function. Or you can use the "[" notation to subset the
methylKit objects.
<<>>==
select(meth,1:5) # get first 10 rows of a methylBase object
myDiff[21:25,] # get 5 rows of a methylDiff object
@

\subsection{reorganize}
\texttt{methylBase} and \texttt{methylRawList} can be reorganized by \texttt{reorganize} function. The function can subset the objects based on provided sample ids, it also creates a new treatment vector determining which samples belong to which group. Order of sample ids should match the treatment vector order.
<<eval=FALSE>>=
# creates a new methylRawList object
myobj2=reorganize(myobj,sample.ids=c("test1","ctrl2"),treatment=c(1,0) )
# creates a new methylBase object
meth2 =reorganize(meth,sample.ids=c("test1","ctrl2"),treatment=c(1,0) )
@

\subsection{percMethylation}
Percent methylation values can be extracted from \texttt{methylBase} object by using \texttt{percMethylation} function.
<<eval=FALSE>>=
# creates a matrix containing percent methylation values
perc.meth=percMethylation(meth)
@

\section{Frequently Asked Questions}
Detailed answers to some of the frequently asked questions and various how-tos 
can be found at \url{http://zvfak.blogspot.com/search/label/methylKit}. 
In addition, \url{http://code.google.com/p/methylkit/} has online documentation
and links to tutorials and other related material. You can also check methylKit
Q\&A forum for answers
\url{https://groups.google.com/forum/#!forum/methylkit_discussion}.

Apart from those here are some of the frequently asked questions.

\subsection{How can I select certain regions/bases from \texttt{methylRaw} or \texttt{methylBase} objects ?}
see \texttt{?select} or \texttt{help("[", package = "methylKit")}

\subsection{How can I find if my regions of interest overlap with 
exon/intron/promoter/CpG island etc.?}
Currently, we will be able to tell you if your regions/bases overlap with
the genomic features or not. 
see ?getMembers. 

\subsection{How can I find the nearest TSS associated with my CpGs}
see ?getAssociationWithTSS

\subsection{How do you define promoters and CpG island shores}
Promoters are defined by options at \texttt{read.transcript.features} function. 
The default option is to take -1000,+1000bp around the TSS and you can change that. 
Same goes for CpG islands when reading them in via \texttt{read.feature.flank} function. 
Default is to take 2000bp flanking regions on each side of the CpG island as shores. 
But you can change that as well.

\subsection{What does Bismark SAM output look like, where can I get more info?}
Check the Bismark\cite{Krueger2011} website and there are  also example files that ship with the 
package. Look at their formats and try to run different variations of 
\texttt{read.bismark()} command on the example files.

\subsection{How can I reorder or remove samples at/from  \texttt{methylRawList} or \texttt{methylBase} objects ?}
see ?reorganize

\subsection{Should I normalize my data?}
\texttt{methylKit} comes with a simple \texttt{normalizeCoverage()} function to normalize read 
coverage distributions between samples. Ideally, you should first filter bases
with extreme coverage to account for PCR bias using \texttt{filterByCoverage()}
function, then run \texttt{normalizeCoverage()} function to normalize coverage
between samples. These two functions will help reduce the bias in the statistical
tests that might occur due to systematic over-sampling of reads in certain samples.


\subsection{How can I force methylKit to use Fisher's exact test?}
\texttt{methylKit} decides which test to use based on number of samples per group.
In order to use Fisher's exact there must be one sample in each of the test and
control groups. So if you have multiple samples for group, the package will
employ Logistic Regression based test. However, you can use \texttt{pool()} 
function to pool samples in each group so that you have one representative sample
per group. \texttt{pool()} function will sum up number of Cs and Ts in each group.
We recommend using \texttt{filterByCoverage()} and \texttt{normalizeCoverage()} 
functions prior to using \texttt{pool()}.
see ?pool

\subsection{Can use data from other aligners than Bismark in methylKit ?}
Yes, you can. methylKit can read any generic methylation percentage/ratio file
as long as that text file contains columns for chromosome, start, end, strand, 
coverage and number of methylated cytosines. However, methylKit can only 
process SAM files from Bismark. For other aligners, you need to get a text file
containing the minimal information described above. Some aligners will come with
scripts or built-in tools to provide such files.
See \url{http://zvfak.blogspot.com/2012/10/how-to-read-bsmap-methylation-ratio.html} 
for how to read methylation ratio files from BSMAP\cite{Xi2009} aligner.


\section{Acknowledgements}
\label{sec:acknowledgements}
This package is developed at Weill Cornell Medical College by Altuna Akalin 
with important code contributions from  
Matthias Kormaksson \texttt{mk375@cornell.edu} and Sheng Li   \texttt{shl2018@med.cornell.edu}. 
We wish to thank especially Maria E. Figueroa, Francine Garret-Bakelman, 
Christopher Mason and Ari Melnick for their contribution of ideas, data and 
support. Their support and discussions lead to development of methylKit.




\section{R session info}
<<>>=
sessionInfo() 
@

\bibliography{Vignette_methylKit.bib}
\end{document}


